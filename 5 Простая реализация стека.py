class Stack:
    def __init__(self):
        self.items = []  
        # Инициализация стека как пустого списка.

    def push(self, item):
        self.items.append(item)  
        # Добавление элемента в стек.

    def pop(self):
        if not self.is_empty():
            return self.items.pop()  
            # Удаление и возврат верхнего элемента стека.
        else:
            return "Стек пустой"  
            # Возвращается сообщение, если стек пуст.

    def is_empty(self):
        return self.items == []  
        # Проверка, пуст ли стек.

# Пример использования
stack = Stack()
# Создание нового объекта стека.

stack.push(1)
stack.push(2)
stack.push(3)
# Добавление элементов в стек.

print(stack.pop())  # Вывод: 3
print(stack.pop())  # Вывод: 2
print(stack.pop())  # Вывод: 1
print(stack.pop())  # Вывод: "Стек пустой"
# Извлечение и вывод элементов из стека.





"""
Понимание self важно при работе с классами в Python.

self - это специальный параметр в методах класса, который ссылается на сам объект, созданный на основе этого класса. При вызове метода класса, Python автоматически передает этот параметр в качестве первого аргумента.

В контексте класса Node, self используется для обращения к атрибутам этого объекта. Например, self.data обращается к атрибуту data объекта Node, а self.next - к атрибуту next.

Когда вы создаете новый узел с помощью node1 = Node(1), параметр 1 передается в метод __init__, а self ссылается на созданный объект (в данном случае node1). Таким образом, self.data устанавливается равным 1.

self.next инициализируется значением None по умолчанию, что означает, что изначально узел не имеет следующего узла.

self важен для того, чтобы каждый объект класса мог хранить свои собственные данные. Он обеспечивает контекст для работы с атрибутами внутри класса.
"""